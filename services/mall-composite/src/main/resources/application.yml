logging:
    level:
        root: INFO
        me.hanwool: DEBUG
        org.apache:
            kafka: WARN
            kafka.clients: WARN
        org.springframework:
            kafka:
                requestreply: DEBUG

server:
    port: 7000
    error:
        include-message: always
    servlet:
        context-path: /

app:
    coupon-service:
        host: localhost
        port: 7001
    order-service:
        host: localhost
        port: 7002

#spring.cloud.stream:
#    defaultBinder: kafka
#    default.contentType: application/json

#    bindings:
#        input-composite:
#            destination: composite
#            group: compositeGroup
#        output-orders:
#            destination: orders

#            producer:
#                required-groups: auditGroup
#        output-coupons:
#            destination: coupons
#            producer:
#                required-groups: auditGroup

#spring.cloud.stream.kafka.binder:
#    brokers: 127.0.0.1
#    defaultBrokerPort: 9092
#    replication-factor: 1 # Creating topics with default partitions/replication factor are only supported in CreateTopicRequest version 4+



#spring.kafka:
#    producer:
#        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#    consumer:
#        value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#        enable-auto-commit: false
#        auto-offset-reset: earliest
#        properties:
#            spring.json.trusted.packages: me.hanwool

spring:
    kafka:
        template:
            default-topic: composite
        consumer:
            group-id: compsiteGroup
#            group-id: auditGroup
#            properties:
#                spring.json.trusted.packages: (*)
#                spring.json.trusted.packages: me.hanwool.mallutilapp.event.Event
        bootstrap-servers: localhost:9092
        client-id: 1

## custom
kafka.output.orders.topic: orders
#kafka.output.coupon.topic: coupons
kafka.input.topic: composite
kafka.consumer.group.id: compsiteGroup

---
spring:
    profiles: dev
    kafka:
        bootstrap-servers: kafka:9092
logging:
    level:
        root: INFO
        me.hanwool: DEBUG

server:
    port: 8080
    error:
        include-message: always

app:
    coupon-service:
        host: coupon
        port: 8080
    order-service:
        host: order
        port: 8080

#spring.cloud.stream.kafka.binder.brokers: kafka


#spring.cloud.stream.bindings.output-orders.producer:
#    partition-key-expression: payload.key
#    partition-count: 2
#
#spring.cloud.stream.bindings.output-coupons.producer:
#    partition-key-expression: payload.key
#    partition-count: 2

---
spring:
    profiles: stage
    kafka:
        bootstrap-servers: kafka-0.kafka-headless.kafka.svc.cluster.local:9092

app:
    coupon-service:
        host: coupon
        port: 8080
    order-service:
        host: order
        port: 8087

server:
#    port: 80
    port: 8088

---
spring:
    profiles: prod

logging:
    level:
        root: INFO
        me.hanwool: INFO

server:
    port: 8080
    error:
        include-message: never

